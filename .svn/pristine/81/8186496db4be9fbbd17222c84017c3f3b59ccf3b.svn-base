//
//  CarPoolingHomeControllerViewController.m
//  callmec
//
//  Created by sam on 16/7/24.
//  Copyright © 2016年 sam. All rights reserved.
//

#import "CarPoolingHomeController.h"



#import <MAMapKit/MAMapKit.h>
#import <AMapSearchKit/AMapSearchAPI.h>
#import "CMLocation.h"
#import "CMDriver.h"
//#import "CMSearchViewController.h"
#import "CMSearchManager.h"

#import "CMDriverManager.h"
#import "CMLocationView.h"
#import "CMTaxiCallRequest.h"

#import "MovingAnnotationView.h"
#import "RegisterController.h"
#import "UserCenterController.h"
#import "MessageController.h"
#import "DriverInfoController.h"
#import "PayOrderController.h"  //test
#import "WaitingCarPoolingCtrl.h"

#import "VerticalView.h"



#import "SpecialCarController.h"
#import "GoodsCarController.h"
#import "AppiontmentController.h"


#import "PopView.h"
#import "TripTypeView.h"

#import "DriverInfoModel.h"
#import "DriverOrderView.h" //test

#import "CarPoolingCell.h"

//#import "<#header#>"
#define kSetingViewHeight 215



@interface CarPoolingHomeController() <TargetActionDelegate,
MAMapViewDelegate,
CMDriverManagerDelegate,
CMLocationViewDelegate,UITableViewDataSource,UITableViewDelegate,CellTargetDelegate>

@property (nonatomic,assign) BOOL isCurrentLocal;
@property (nonatomic,strong) UIButton *buttonLocating;
@property (nonatomic, assign) BOOL isLocating;
//@property (nonatomic,strong) TripTypeView *top_container;
@property (nonatomic,strong) UIView *bottom_container;
@property (nonatomic,strong) NSArray *carTypeArray;
@property (nonatomic, assign) CMState state;



@property (nonatomic, strong) CMLocation * currentLocation;
@property (nonatomic, strong) CMLocation * destinationLocation;
@property (nonatomic, strong) CMLocationView *locationView;

@property (nonatomic, strong) UIButton *btn_left;
@property (nonatomic, strong) UIButton *btn_right;

@property (nonatomic,strong) UITableView *mTableView;
@property (nonatomic,strong) NSMutableArray *dataArray;
@property (nonatomic,strong) UIView *tipView;


@property (nonatomic,strong) UIView *middle_container;
@end


@implementation CarPoolingHomeController
{
    BOOL _needsFirstLocating;
    CMDriverManager * _driverManager;
    NSArray * _drivers;
    MAPointAnnotation * _selectedDriver;
    MAPointAnnotation * _centerAnnotion;
    UIButton *_buttonAction;
    UIButton *_buttonCancel;
    UIButton *_buttonLocating;
    
    int _currentSearchLocation; //0 start, 1 end
    MAPinAnnotationView *centerAnnotationView;
    PopView *popView;
    CLLocationCoordinate2D local2D;
    NSInteger page;
}


- (void)viewDidLoad {
    [super viewDidLoad];
//    [self initMapView];
    [self initView];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(reloadTableView) name:@"NOTICE_UPDATE_CARPOOLING_INFO" object:nil];
}

- (void) initView
{
    
    [self.headerView setHidden:YES];
    _buttonLocating = [UIButton buttonWithType:UIButtonTypeCustom];
    [_buttonLocating setImage:[UIImage imageNamed:@"location"] forState:UIControlStateNormal];
    _buttonLocating.backgroundColor = [UIColor whiteColor];
    _buttonLocating.layer.cornerRadius = 6;
    _buttonLocating.layer.shadowColor = [UIColor blackColor].CGColor;
    _buttonLocating.layer.shadowOffset = CGSizeMake(1, 1);
    _buttonLocating.layer.shadowOpacity = 0.5;
    [_buttonLocating addTarget:self action:@selector(actionLocating:) forControlEvents:UIControlEventTouchUpInside];
    _buttonLocating.frame = CGRectMake(30, 110, 40, 40);
    
    [self initBottomView];
    [self.mapView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.equalTo(self.view);
        make.left.equalTo(self.view);
        make.width.equalTo(self.view);
        make.bottom.equalTo(self.bottom_container.mas_top);
    }];
    
    [_bottom_container mas_makeConstraints:^(MASConstraintMaker *make) {
//        make.top.equalTo(self.mapView.mas_bottom);
        make.left.equalTo(self.view);
        make.height.mas_equalTo(60);
        make.width.equalTo(self.view);
        make.bottom.equalTo(self.view);
    }];
    
    [self initTableView];
    
    _tipView =[[UIView alloc] init];
    UILabel *tipLabel = [[UILabel alloc] init];
    [tipLabel setText:@"尊敬的用户\n欢迎使用呼我拼车，点击底部按钮开始愉快行程"];
    [tipLabel setFont:[UIFont fontWithName:@"Helvetica-Bold" size:14]];
    [tipLabel setTextAlignment:NSTextAlignmentCenter];
    [tipLabel setTextColor:RGBHex(g_assit_c)];
    [tipLabel setLineBreakMode:NSLineBreakByCharWrapping];
    [tipLabel setNumberOfLines:0];
    [_tipView setBackgroundColor:[UIColor whiteColor]];
    [_tipView addSubview:tipLabel];
    [_tipView setHidden:YES];
    [tipLabel mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.equalTo(_tipView);
        make.left.equalTo(_tipView);
        make.right.equalTo(_tipView);
        make.bottom.equalTo(_tipView);
    }];
    [self.view addSubview:_tipView];
    [_tipView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.equalTo(self.view);
        make.left.equalTo(self.view);
        make.right.equalTo(self.view);
        make.height.mas_equalTo(60);
    }];
    
    [self initTableCenterView];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
}


- (void)viewDidAppear:(BOOL)animated
{
    [super viewDidAppear:animated];
    self.mapView.delegate = self;
    self.mapView.showsUserLocation = YES;//YES开启定位，NO关闭定位
 
}

- (void)viewDidDisappear:(BOOL)animated
{
    [super viewDidDisappear:animated];
}

- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    if (_mTableView) {
        [_mTableView.mj_header beginRefreshing];
    }
}

#pragma mark - Init & Construct

- (void)configMapView
{
    //    [self.mapView setDelegate:self];
    //    [self.mapView mas_updateConstraints:^(MASConstraintMaker *make) {
    //        make.top.equalTo(self.headerView.mas_bottom);
    //        make.left.equalTo(self.view);
    //        make.width.equalTo(self.view);
    //        make.bottom.equalTo(self.view);
    //    }];
    //    [self.view insertSubview:self.mapView atIndex:0];
    //    self.mapView.showsUserLocation = YES;
    
    popView = [[PopView alloc] init];
    [popView setBackgroundColor:[UIColor redColor]];
    [popView setTitle:@"当前位置"];
    [popView setLeftTime:@"3分钟"];
    [self.view addSubview:popView];
    if (!centerAnnotationView) {
        centerAnnotationView = [[MAPinAnnotationView alloc] initWithAnnotation:_centerAnnotion
                                                               reuseIdentifier:@"map_user_center"];
    }
    centerAnnotationView.draggable = YES;
    [centerAnnotationView setDragState:(MAAnnotationViewDragStateDragging)];
    UIImage *image = [UIImage imageNamed:@"map_me"];
    centerAnnotationView.image = image;
    UILabel *label = [[UILabel alloc] init];
    [label setFrame:CGRectMake(0, 0, 60, 20)];
    [label setText:@"3分钟"];
    centerAnnotationView.leftCalloutAccessoryView = label;
    centerAnnotationView.centerOffset = CGPointMake(0,0);
    centerAnnotationView.frame = CGRectMake(self.mapView.center.x-image.size.width/2,
                                            self.mapView.center.y-6,
                                            image.size.width,
                                            image.size.height);
    centerAnnotationView.canShowCallout = NO;
    [self.view addSubview:centerAnnotationView];
    [centerAnnotationView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.equalTo(self.mapView).offset(0);
        make.centerY.equalTo(self.mapView).offset(0);
        make.size.mas_equalTo(image.size);
    }];
    [popView setTitle:@"当前位置上车"];
    [popView setLeftTime:@"3分钟"];
    [popView setCornerRadius:5];
    [popView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.bottom.equalTo(centerAnnotationView.mas_top).offset(-5);
        make.centerX.equalTo(self.mapView);
        make.width.mas_equalTo(120);
        make.height.mas_equalTo(25);
    }];
}

- (void)mapView:(MAMapView *)mapView didUpdateUserLocation:(MAUserLocation *)userLocation updatingLocation:(BOOL)updatingLocation
{
    // 第一次定位时才将定位点显示在地图中心
    //NSLog(@"%d    %d",_needsFirstLocating,updatingLocation);
    if (_needsFirstLocating && updatingLocation)
    {
        
        [self actionLocating:nil];
        self.mapView.centerCoordinate = self.mapView.userLocation.location.coordinate;
        _needsFirstLocating = NO;
        
        CMLocation *loca = [[CMLocation alloc] init];
        self.currentLocation = loca;
        [self searchReGeocodeWithCoordinate:self.mapView.userLocation.location.coordinate];
        local2D = self.mapView.userLocation.location.coordinate;
        [self updatingDrivers];
    }
}


- (MAAnnotationView *)mapView:(MAMapView *)mapView viewForAnnotation:(id<MAAnnotation>)annotation
{
    /* 自定义userLocation对应的annotationView. */
    //    if ([annotation isKindOfClass:[MAUserLocation class]])
    //    {
    //        static NSString *userLocationStyleReuseIndetifier = @"userLocationReuseIndetifier";
    //        MAAnnotationView *annotationView = [mapView dequeueReusableAnnotationViewWithIdentifier:userLocationStyleReuseIndetifier];
    //        if (annotationView == nil)
    //        {
    //            annotationView = [[MAPinAnnotationView alloc] initWithAnnotation:nil
    //                                                             reuseIdentifier:userLocationStyleReuseIndetifier];
    //        }
    //        annotationView.draggable = YES;
    //        [annotationView setDragState:(MAAnnotationViewDragStateDragging)];
    //        //(MAAnnotationViewDragState)
    //        UIImage *image = [UIImage imageNamed:@"map_me"];
    //        annotationView.image = image;
    //        UILabel *label = [[UILabel alloc] init];
    //        [label setFrame:CGRectMake(0, 0, 60, 20)];
    //        [label setText:@"3分钟"];
    //        [label setBackgroundColor:[UIColor blueColor]];
    //        annotationView.leftCalloutAccessoryView = label;
    //        annotationView.centerOffset = CGPointMake(0, -22);
    //        annotationView.canShowCallout = YES;
    //        annotationView.center = self.mapView.center;
    //        return annotationView;
    //    }
    
    if ([annotation isKindOfClass:[MAPointAnnotation class]])
    {
        static NSString *pointReuseIndetifier = @"driverReuseIndetifier";
        
        MovingAnnotationView *annotationView = (MovingAnnotationView *)[mapView dequeueReusableAnnotationViewWithIdentifier:pointReuseIndetifier];
        if (annotationView == nil)
        {
            annotationView = [[MovingAnnotationView alloc] initWithAnnotation:annotation
                                                              reuseIdentifier:pointReuseIndetifier];
        }
        
        UIImage *image = [UIImage imageNamed:@"dirver_marker"];
        
        annotationView.image = image;
        annotationView.centerOffset = CGPointMake(0, -22);
        annotationView.canShowCallout = YES;
        
        return annotationView;
    }else{
        
        static NSString *userLocationStyleReuseIndetifier = @"common_user_indetifier";
        MAAnnotationView *annotationView = [mapView dequeueReusableAnnotationViewWithIdentifier:userLocationStyleReuseIndetifier];
        if (annotationView == nil)
        {
            annotationView = [[MAPinAnnotationView alloc] initWithAnnotation:annotation
                                                             reuseIdentifier:userLocationStyleReuseIndetifier];
        }
        UIImage *image = [UIImage imageNamed:@"icon_qidian_dot_3"];
        annotationView.image = image;
        annotationView.centerOffset = CGPointMake(0,0);
        annotationView.canShowCallout = NO;
        return annotationView;
    }
    
    return nil;
}


#pragma mark -  Action Reset Locating

- (void) resetMapToCenter:(CLLocationCoordinate2D)coordinate
{
    self.mapView.centerCoordinate = coordinate;
    self.mapView.zoomLevel = 17;
    
    // 使得userLocationView在最前。
    [self.mapView selectAnnotation:self.mapView.userLocation animated:YES];
}

- (void) updateCarsDrivers
{
    _isLocating = NO;
}

- (void) buttonTarget:(id)sender
{
    /*
     if (YES) {
     PayOrderController *order = [[PayOrderController alloc] init];
     order.orderId = @"218";
     [self.navigationController pushViewController:order animated:YES];
     return;
     }
     */
    if (sender ==self.leftButton) {
        if (![GlobalData sharedInstance].user.isLogin) {
            RegisterController *login = [[RegisterController alloc] init];
            [self.navigationController pushViewController:login animated:YES];
        }else{
            UserCenterController *center = [[UserCenterController alloc] init];
            [self.navigationController pushViewController:center animated:YES];
        }
    }else if(sender == self.rightButton)
    {
        //MessageController *message = [[MessageController alloc] init];
        //[self.navigationController pushViewController:message animated:YES];
        
        DriverInfoController *driverInfo = [[DriverInfoController alloc] init];
        [self.navigationController pushViewController:driverInfo animated:YES];
        
    }else if([sender isKindOfClass:[UIButton class]])
    {
        /*
        WaitingCarPoolingCtrl *waiting = [[WaitingCarPoolingCtrl alloc] init];
        [self.navigationController pushViewController:waiting animated:YES];
        return;*/
        
        if(![GlobalData sharedInstance].user.isLogin)
        {
            [MBProgressHUD showAndHideWithMessage:@"您现在是未登录状态无法预约车!" forHUD:nil];
            return;
        }
        UIButton *but = (UIButton*)sender;
        switch (but.tag) {
            case 1:
            {
                if (!_tripModel) {
                    [MBProgressHUD showAndHideWithMessage:@"请选择出行方式，专车、拼车或者其他!" forHUD:nil];
                    return;
                }
                if ([@"1" isEqualToString:_tripModel.tripType]) {
                    SpecialCarController *special = [[SpecialCarController alloc] init];
                    special.startLocation = self.currentLocation;
                    special.isNowUseCar = YES;
                    special.carTypeModel = _tripModel;
                    [self.navigationController pushViewController:special animated:YES];
                }else if([@"2" isEqualToString:_tripModel.tripType])
                {
                    AppiontmentController *special = [[AppiontmentController alloc] init];
                    special.startLocation = self.currentLocation;
                    special.isNowUseCar = YES;
                    special.tripTypeModel = _tripModel;
                    [self.navigationController pushViewController:special animated:YES];
                }else if([@"3" isEqualToString:_tripModel.tripType])
                {
                    SpecialCarController *special = [[SpecialCarController alloc] init];
                    special.startLocation = self.currentLocation;
                    special.isNowUseCar = YES;
                    special.carTypeModel = _tripModel;
                    [self.navigationController pushViewController:special animated:YES];
                }else if([@"4" isEqualToString:_tripModel.tripType])
                {
                    GoodsCarController *special = [[GoodsCarController alloc] init];
                    special.startLocation = self.currentLocation;
                    special.isNowUseCar = YES;
                    special.carTypeModel = _tripModel;
                    [self.navigationController pushViewController:special animated:YES];
                }
                
            }
                break;
            case 2:
            {
                if (!_tripModel) {
                    [MBProgressHUD showAndHideWithMessage:@"请选择出行方式，专车、拼车或者其他!" forHUD:nil];
                    return;
                }
                
                SpecialCarController *special = [[SpecialCarController alloc] init];
                special.startLocation = self.currentLocation;
                special.isNowUseCar = NO;
                special.carTypeModel = _tripModel;
                [self.navigationController pushViewController:special animated:YES];
            }
                break;
            default:
                break;
        }
    }else if([sender isKindOfClass:[VerticalView class]])
    {
        NSInteger tag = ((UIView*)sender).tag;
        _tripModel = _carTypeArray[tag];
        if (tag==0) {
            [_btn_left setTitle:@"现在用车" forState:UIControlStateNormal];
            [_btn_left mas_remakeConstraints:^(MASConstraintMaker *make) {
                make.top.equalTo(_bottom_container);
                make.left.equalTo(_bottom_container);
                make.height.equalTo(_bottom_container);
                make.width.equalTo(_bottom_container.mas_width).dividedBy(2);
            }];
            
            [_btn_right mas_remakeConstraints:^(MASConstraintMaker *make) {
                make.top.equalTo(_bottom_container);
                make.left.equalTo(_btn_left.mas_right).offset(1);
                make.height.equalTo(_bottom_container);
                make.width.equalTo(_bottom_container.mas_width).dividedBy(2);
            }];
        }else if (tag==1)
        {
            [_btn_left setTitle:@"发布拼车行程信息" forState:UIControlStateNormal];
            [_btn_left mas_remakeConstraints:^(MASConstraintMaker *make) {
                make.top.equalTo(_bottom_container);
                make.left.equalTo(_bottom_container);
                make.height.equalTo(_bottom_container);
                make.width.equalTo(_bottom_container.mas_width).multipliedBy(1);
            }];
            /*
             [_btn_right mas_remakeConstraints:^(MASConstraintMaker *make) {
             make.top.equalTo(_bottom_container);
             make.left.equalTo(_btn_left.mas_right).offset(1);
             make.height.equalTo(_bottom_container);
             make.width.equalTo(_bottom_container.mas_width).multipliedBy(0.5);
             }];*/
        }else if (tag==2)
        {
            [_btn_left setTitle:@"快吧预约" forState:UIControlStateNormal];
            [_btn_left mas_remakeConstraints:^(MASConstraintMaker *make) {
                make.top.equalTo(_bottom_container);
                make.left.equalTo(_bottom_container);
                make.height.equalTo(_bottom_container);
                make.width.equalTo(_bottom_container.mas_width).multipliedBy(1);
            }];
        }else if (tag==3)
        {
            [_btn_left setTitle:@"带货预约" forState:UIControlStateNormal];
            [_btn_left mas_remakeConstraints:^(MASConstraintMaker *make) {
                make.top.equalTo(_bottom_container);
                make.left.equalTo(_bottom_container);
                make.height.equalTo(_bottom_container);
                make.width.equalTo(_bottom_container.mas_width).multipliedBy(1);
            }];
        }
    }
    
}

#pragma mark - search
- (void)searchReGeocodeWithCoordinate:(CLLocationCoordinate2D)coordinate
{
    AMapReGeocodeSearchRequest *regeo = [[AMapReGeocodeSearchRequest alloc] init];
    
    regeo.location = [AMapGeoPoint locationWithLatitude:coordinate.latitude longitude:coordinate.longitude];
    regeo.requireExtension = NO;
    
    __weak __typeof(&*self) weakSelf = self;
    //@weakify(self);
    [[CMSearchManager sharedInstance] searchForRequest:regeo completionBlock:^(id request, id response, NSError *error) {
        if (error)
        {
            NSLog(@"error :%@", error);
        }
        else
        {
            AMapReGeocodeSearchResponse * regeoResponse = response;
            if (regeoResponse.regeocode != nil)
            {
                if (regeoResponse.regeocode.pois.count > 0)
                {
                    AMapPOI *poi = regeoResponse.regeocode.pois[0];
                    
                    weakSelf.currentLocation.coordinate = CLLocationCoordinate2DMake(poi.location.latitude, poi.location.longitude);
                    weakSelf.currentLocation.name = poi.name;
                    
                    weakSelf.currentLocation.address = poi.address;
                }
                else
                {
                    weakSelf.currentLocation.coordinate = CLLocationCoordinate2DMake(regeoResponse.regeocode.addressComponent.streetNumber.location.latitude, regeoResponse.regeocode.addressComponent.streetNumber.location.longitude);
                    weakSelf.currentLocation.name = [NSString stringWithFormat:@"%@%@%@%@%@", regeoResponse.regeocode.addressComponent.township, regeoResponse.regeocode.addressComponent.neighborhood, regeoResponse.regeocode.addressComponent.streetNumber.street, regeoResponse.regeocode.addressComponent.streetNumber.number, regeoResponse.regeocode.addressComponent.building];
                    
                    weakSelf.currentLocation.address = regeoResponse.regeocode.formattedAddress;
                }
                
                weakSelf.currentLocation.cityCode = regeoResponse.regeocode.addressComponent.citycode;
                weakSelf.currentLocation.city = regeoResponse.regeocode.addressComponent.city;
                weakSelf.isLocating = NO;
                [GlobalData sharedInstance].city = weakSelf.currentLocation.city;
                //                weakSelf.currentLocation.coordinate = local2D;
                NSLog(@"currentLocation:%@", weakSelf.currentLocation);
            }
        }
    }];
}

#pragma mark - Action

- (void)actionAddEnd:(UIButton *)sender
{
    NSLog(@"actionAddEnd");
    
    if (_currentLocation.cityCode.length == 0)
    {
        NSLog(@"the city have not been located");
        return;
    }
    
    _currentSearchLocation = 1;
    
    /*
     DDSearchViewController *searchController = [[CMSearchViewController alloc] init];
     searchController.delegate = self;
     searchController.city = _currentLocation.cityCode;
     [self.navigationController pushViewController:searchController animated:YES];
     */
}

- (void)actionCancel:(UIButton *)sender
{
    NSLog(@"actionCancel");
    [self setState:CMState_Init];
}

- (void)actionCallTaxi:(UIButton *)sender
{
    NSLog(@"actionCallTaxi");
    if (self.currentLocation && self.destinationLocation)
    {
        
        CMTaxiCallRequest * request = [[CMTaxiCallRequest alloc] initWithStart:self.currentLocation to:self.destinationLocation];
        [_driverManager callTaxiWithRequest:request];
        //        _messageView = [_mapView viewForMessage:@"正在呼叫司机..." title:nil image:nil];
        //        _messageView.center = [_mapView centerPointForPosition:@"center" withToast:_messageView];
        //        [self.mapView addSubview:_messageView];
        
    }
}

- (void)actionLocating:(UIButton *)sender
{
    NSLog(@"actionLocating");
    
    // 只有初始状态下才可以进行定位。
    if (_state != CMState_Init)
    {
        [MBProgressHUD showAndHideWithMessage:@"重新请求需先取消用车" forHUD:nil];
        return;
    }
    
    if (!_isLocating)
    {
        _isLocating = YES;
        
        [self resetMapToCenter:self.mapView.userLocation.location.coordinate];
        [self searchReGeocodeWithCoordinate:self.mapView.userLocation.location.coordinate];
        [self updatingDrivers];
    }
}

#pragma mark - drivers
- (void)updatingDrivers
{
#define latitudinalRangeMeters 1000.0
#define longitudinalRangeMeters 1000.0
    
    MAMapRect rect = MAMapRectForCoordinateRegion(MACoordinateRegionMakeWithDistance(self.mapView.centerCoordinate, latitudinalRangeMeters, longitudinalRangeMeters));
    [_driverManager searchDriver:rect WithCoordinate2D:local2D withCarType:@"1"];
}

#pragma mark - driversManager delegate

- (void)searchDoneInMapRect:(MAMapRect)mapRect withDriversResult:(NSArray *)drivers timestamp:(NSTimeInterval)timestamp
{
    [self.mapView removeAnnotations:_drivers];
    NSMutableArray * currDrivers = [NSMutableArray arrayWithCapacity:[drivers count]];
    [drivers enumerateObjectsUsingBlock:^(DriverInfoModel * obj, NSUInteger idx, BOOL *stop) {
        MAPointAnnotation * driver = [[MAPointAnnotation alloc] init];
        CLLocationDegrees latitude = [obj.latitude floatValue];
        CLLocationDegrees longitude = [obj.longitude floatValue];
        CLLocationCoordinate2D coordinate =CLLocationCoordinate2DMake(latitude,longitude);
        
        driver.coordinate = coordinate;
        driver.title = obj.identifierNo;
        [currDrivers addObject:driver];
    }];
    
    [self.mapView addAnnotations:currDrivers];
    
    _drivers = currDrivers;
    
}

//CMTaxiCallRequest
- (void)callTaxiDoneWithRequest:(CMTaxiCallRequest *)request Taxi:(CMDriver *)driver
{
    
    [self.mapView removeAnnotations:_drivers];
    
    _selectedDriver = [[MAPointAnnotation alloc] init];
    _selectedDriver.coordinate = driver.coordinate;
    _selectedDriver.title = driver.idInfo;
    [self.mapView addAnnotation:_selectedDriver];
    
    //    [self.messageView removeFromSuperview];
    //    [self.mapView makeToast:[NSString stringWithFormat:@"已选择司机%@",driver.idInfo, nil] duration:0.5 position:@"center"];
    
    [self setState:CMState_Call_Taxi];
    
}

- (void)onUpdatingLocations:(NSArray *)locations forDriver:(CMDriver *)driver
{
    if ([locations count] > 0) {
        
        [self.mapView selectAnnotation:_selectedDriver animated:NO];
        _selectedDriver.coordinate = ((CLLocation*) [locations lastObject]).coordinate;
        
        CLLocationCoordinate2D * locs = (CLLocationCoordinate2D *)malloc(sizeof(CLLocationCoordinate2D) * [locations count]);
        [locations enumerateObjectsUsingBlock:^(CLLocation * obj, NSUInteger idx, BOOL *stop) {
            locs[idx] = obj.coordinate;
        }];
        
        MovingAnnotationView * driverView = (MovingAnnotationView *)[self.mapView viewForAnnotation:_selectedDriver];
        
        [driverView addTrackingAnimationForCoordinates:locs count:[locations count] duration:2.0];
        
        free(locs);
    }
}


- (void)actionOnTaxi:(UIButton *)sender
{
    NSLog(@"actionOnTaxi");
    [self setState:CMState_On_Taxi];
}

- (void)actionOnPay:(UIButton *)sender
{
    NSLog(@"actionOnPay");
    [self setState:CMState_Finish_pay];
}

- (void)actionOnEvaluate:(UIButton *)sender
{
    NSLog(@"actionOnEvaluate");
    [self setState:CMState_Init];
}


#pragma mark - Utility

- (void)requestPathInfo
{
    //检索所需费用
    AMapDrivingRouteSearchRequest *navi = [[AMapDrivingRouteSearchRequest alloc] init];
    navi.requireExtension = YES;
    
    /* 出发点. */
    navi.origin = [AMapGeoPoint locationWithLatitude:_currentLocation.coordinate.latitude
                                           longitude:_currentLocation.coordinate.longitude];
    /* 目的地. */
    navi.destination = [AMapGeoPoint locationWithLatitude:_destinationLocation.coordinate.latitude
                                                longitude:_destinationLocation.coordinate.longitude];
    
    __weak __typeof(&*self) weakSelf = self;
    [[CMSearchManager sharedInstance] searchForRequest:navi completionBlock:^(id request, id response, NSError *error) {
        
        AMapRouteSearchResponse *naviResponse = response;
        
        if (naviResponse.route == nil)
        {
            [weakSelf.locationView setInfo:@"获取路径失败"];
            return;
        }
        
        AMapPath * path = [naviResponse.route.paths firstObject];
        [weakSelf.locationView setInfo:[NSString stringWithFormat:@"预估费用%.2f元  距离%.1f km  时间%.1f分钟", naviResponse.route.taxiCost, path.distance / 1000.f, path.duration / 60.f, nil]];
    }];
}

- (void)setState:(CMState)state
{
    _state = state;
    
    switch (state)
    {
        case CMState_Init:
            [self reset];
            
            [_buttonAction setTitle:@"选择终点" forState:UIControlStateNormal];
            [_buttonAction removeTarget:self action:NULL forControlEvents:UIControlEventTouchUpInside];
            [_buttonAction addTarget:self action:@selector(actionAddEnd:) forControlEvents:UIControlEventTouchUpInside];
            break;
            
        case CMState_Confirm_Destination:
            [self requestPathInfo];
            
            [_buttonAction setTitle:@"马上叫车" forState:UIControlStateNormal];
            [_buttonAction removeTarget:self action:NULL forControlEvents:UIControlEventTouchUpInside];
            [_buttonAction addTarget:self action:@selector(actionCallTaxi:) forControlEvents:UIControlEventTouchUpInside];
            
            break;
        case CMState_Call_Taxi:
            [_buttonAction setTitle:@"我已上车" forState:UIControlStateNormal];
            [_buttonAction removeTarget:self action:NULL forControlEvents:UIControlEventTouchUpInside];
            
            [_buttonAction addTarget:self action:@selector(actionOnTaxi:) forControlEvents:UIControlEventTouchUpInside];
            
            break;
        case CMState_On_Taxi:
            [_buttonAction setTitle:@"支付" forState:UIControlStateNormal];
            [_buttonAction removeTarget:self action:NULL forControlEvents:UIControlEventTouchUpInside];
            
            [_buttonAction addTarget:self action:@selector(actionOnPay:) forControlEvents:UIControlEventTouchUpInside];
            break;
            
        case CMState_Finish_pay:
            [_buttonAction setTitle:@"评价" forState:UIControlStateNormal];
            [_buttonAction removeTarget:self action:NULL forControlEvents:UIControlEventTouchUpInside];
            
            [_buttonAction addTarget:self action:@selector(actionOnEvaluate:) forControlEvents:UIControlEventTouchUpInside];
            break;
            
        default:
            break;
    }
    
    // 设置locationView是否响应交互。
    /*_locationView.userInteractionEnabled = state < CMState_Call_Taxi;*/
    _buttonCancel.hidden = state == CMState_Init;
}

- (void)reset
{
    [self.mapView removeAnnotations:_drivers];
    [self.mapView removeAnnotation:_selectedDriver];
    
    _needsFirstLocating = YES;
    _destinationLocation = nil;
    _locationView.endLocation = nil;
    _locationView.info = nil;
}

/*
 - (void)resetMapToCenter:(CLLocationCoordinate2D)coordinate
 {
 self.mapView.centerCoordinate = coordinate;
 self.mapView.zoomLevel = 15.1;
 
 // 使得userLocationView在最前。
 [self.mapView selectAnnotation:self.mapView.userLocation animated:YES];
 }
 */

#pragma mark - DDLocationViewDelegate

- (void)didClickStartLocation:(CMLocationView *)locationView
{
    _currentSearchLocation = 0;
    /*
     CMSearchViewController *searchController = [[CMSearchViewController alloc] init];
     searchController.delegate = self;
     searchController.text = locationView.startLocation.name;
     searchController.city = locationView.startLocation.cityCode;
     
     [self.navigationController pushViewController:searchController animated:YES];
     */
}

- (void)didClickEndLocation:(CMLocationView *)locationView
{
    _currentSearchLocation = 1;
    /*
     DDSearchViewController *searchController = [[DDSearchViewController alloc] init];
     searchController.delegate = self;
     searchController.text = locationView.endLocation.name;
     searchController.city = locationView.endLocation.cityCode;
     [self.navigationController pushViewController:searchController animated:YES];
     */
}

- (void)mapView:(MAMapView *)mapView mapWillMoveByUser:(BOOL)wasUserAction
{
    //NSLog(@"mapWillMoveByUser%f %f",mapView.centerCoordinate.latitude,mapView.centerCoordinate.longitude);
    
}

- (void)mapView:(MAMapView *)mapView mapDidMoveByUser:(BOOL)wasUserAction
{
    NSLog(@"mapDidMoveByUser%f %f",mapView.centerCoordinate.latitude,mapView.centerCoordinate.longitude);
    CLLocationCoordinate2D local =mapView.centerCoordinate;
    if (wasUserAction)
    {
        if (!_centerAnnotion)
        {
            _centerAnnotion =[[MAPointAnnotation alloc] init];
        }
        _centerAnnotion.coordinate = local;
        _centerAnnotion.title =@"选择上车位置";
        centerAnnotationView.annotation = _centerAnnotion;
        
        CMLocation *loca = [[CMLocation alloc] init];
        self.currentLocation = loca;
        [self searchReGeocodeWithCoordinate:local];
        local2D = local;
        [self updatingDrivers];
    }
}

- (void) mapViewDidFinishLoadingMap:(MAMapView *)mapView
{
    
    
}

- (void) mapView:(MAMapView *)mapView annotationView:(MAAnnotationView *)view didChangeDragState:(MAAnnotationViewDragState)newState fromOldState:(MAAnnotationViewDragState)oldState
{
    NSLog(@"didChangeDragStatedidChangeDragState");
}

- (void) mapView:(MAMapView *)mapView didAddOverlayRenderers:(NSArray *)overlayRenderers
{
    
}

- (void) initData
{
//    if (!_dataArray) {
        _dataArray = [NSMutableArray array];
//    }else{
//        [_dataArray removeAllObjects];
//    }
   
    page = 1;
    [CarOrderModel fetchCarPoolingOrderList:page Succes:^(NSArray *result, int pageCount, int recordCount) {
        _dataArray = [NSMutableArray array];

        for (NSDictionary *dict in result) {
                CarOrderModel *model = [[CarOrderModel alloc] initWithDictionary:dict error:nil];
                [_dataArray addObject:model];
        }
        if (_dataArray.count>0) {
//            [_tipView setHidden:YES];
            [_mTableView setHidden:NO];
            [_middle_container setHidden:YES];
        }else{
            [_mTableView setHidden:YES];
            [_middle_container setHidden:NO];
//            [_tipView setHidden:NO];
        }
        [_mTableView.mj_header endRefreshing];
        [_mTableView reloadData];
    } failed:^(NSInteger errorCode, NSString *errorMessage) {
        NSLog(@"errorMessage:%@",errorMessage);
        [_mTableView.mj_header endRefreshing];
    }];
}

- (void) initMoreData
{
    page++;
    [CarOrderModel fetchCarPoolingOrderList:page Succes:^(NSArray *result, int pageCount, int recordCount) {
        for (NSDictionary *dict in result) {
            CarOrderModel *model = [[CarOrderModel alloc] initWithDictionary:dict error:nil];
            [_dataArray addObject:model];
        }
        if (_dataArray.count>0) {
            [_tipView setHidden:YES];
        }else{
            [_tipView setHidden:NO];
        }
        [_mTableView.mj_footer endRefreshing];
        [_mTableView reloadData];
    } failed:^(NSInteger errorCode, NSString *errorMessage) {
        NSLog(@"errorMessage:%@",errorMessage);
        [_mTableView.mj_footer endRefreshing];
    }];
}

#pragma mark -  UITableViewDataSource
- (NSInteger) numberOfSectionsInTableView:(UITableView *)tableView
{
    return _dataArray.count;
}

- (NSInteger) tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    return 1;
}

- (UITableViewCell*) tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    static NSString* cellid=@"cellid";
    CarPoolingCell *cell = [tableView dequeueReusableCellWithIdentifier:cellid];
    if (!cell) {
        cell =[[CarPoolingCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellid];
    }
    BaseModel *model;
    if (_dataArray.count>0) {
        model = _dataArray[indexPath.section];
    }
    [cell setModel:model];
    [cell setDelegate:self];
    return cell;
}

#pragma mark - UITableViewDelegate

- (CGFloat) tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
    return 70;
}

- (void) tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
}

#pragma mark - cellDelegate
- (void) cellTarget:(CarOrderModel*)sender
{
    if ([@"6" isEqualToString:sender.state]) {
        PayOrderController *order = [[PayOrderController alloc] init];
        order.orderId = sender.ids;
        [self.navigationController pushViewController:order animated:YES];
    }else{
        WaitingCarPoolingCtrl *waiting = [[WaitingCarPoolingCtrl alloc] init];
        waiting.model = sender;
        [self.navigationController pushViewController:waiting animated:YES];
    }
}


- (void) reloadTableView
{
    [self.mTableView.mj_header beginRefreshing];
}

- (void)dealloc
{
    [[NSNotificationCenter defaultCenter] removeObserver:self];
}

- (void) reloadData
{
    [self initData];
}

- (void) initBottomView
{
    _bottom_container =[[UIView alloc] init];
    _btn_left = [UIButton buttonWithType:UIButtonTypeCustom];
    _btn_right = [UIButton buttonWithType:UIButtonTypeCustom];
    [_btn_left setImage:[UIImage imageNamed:@"pinchebai"] forState:UIControlStateNormal];
    [_btn_left setTitle:@"现在用车" forState:UIControlStateNormal];
    [_btn_left setTitleColor:RGBHex(g_white) forState:UIControlStateNormal];
    [_btn_left.titleLabel setFont:[UIFont systemFontOfSize:15]];
    [_btn_left setBackgroundColor:RGBHex(g_blue)];
    [_btn_left setTag:1];
    [_btn_left addTarget:self action:@selector(buttonTarget:) forControlEvents:UIControlEventTouchUpInside];
    
    [_btn_right setImage:[UIImage imageNamed:@"yuyuebai1"] forState:UIControlStateNormal];
    [_btn_right setTitle:@"预约用车" forState:UIControlStateNormal];
    [_btn_right setTitleColor:RGBHex(g_white) forState:UIControlStateNormal];
    [_btn_right.titleLabel setFont:[UIFont systemFontOfSize:15]];
    [_btn_right setBackgroundColor:RGBHex(g_blue)];
    
    [_btn_right setTag:2];
    [_btn_right addTarget:self action:@selector(buttonTarget:) forControlEvents:UIControlEventTouchUpInside];
    UIView *grayline = [[UIView alloc] init];
    [grayline setBackgroundColor:RGBHex(g_assit_gray)];
    [_bottom_container setBackgroundColor:RGBHex(g_gray)];
    [_bottom_container addSubview:grayline];
    [_bottom_container addSubview:_btn_left];
    [_bottom_container addSubview:_btn_right];
    
    [grayline mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.equalTo(_bottom_container);
        make.left.equalTo(_bottom_container);
        make.right.equalTo(_bottom_container);
        make.height.mas_equalTo(1);
    }];
    
    [_btn_left mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.equalTo(grayline.mas_bottom);
        make.left.equalTo(_bottom_container);
        make.height.equalTo(_bottom_container);
        make.width.equalTo(_bottom_container.mas_width).dividedBy(2);
    }];
    
    [_btn_right mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.equalTo(grayline.mas_bottom);
        make.left.equalTo(_btn_left.mas_right).offset(1);
        make.height.equalTo(_bottom_container);
        make.width.equalTo(_bottom_container.mas_width).dividedBy(2);
    }];
    [_btn_left setTitle:@"发布拼车行程信息" forState:UIControlStateNormal];
    [_btn_left mas_remakeConstraints:^(MASConstraintMaker *make) {
        make.top.equalTo(grayline.mas_bottom);
        make.left.equalTo(_bottom_container);
        make.height.equalTo(_bottom_container);
        make.width.equalTo(_bottom_container.mas_width);
    }];
    
    [self.view addSubview:_bottom_container];

}

- (void) initTableView
{
    _mTableView =[[UITableView alloc] initWithFrame:CGRectMake(0, 0, 0, 0)];
    _mTableView.delegate = self;
    _mTableView.dataSource = self;
    [_mTableView setHidden:YES];
    _mTableView.mj_header = [MJRefreshNormalHeader headerWithRefreshingBlock:^{
        [self initData];
    }];
    [_mTableView.mj_header beginRefreshing];
    
    _mTableView.mj_footer =[MJRefreshAutoFooter footerWithRefreshingBlock:^{
        [self initMoreData];
    }];
    
    [self.view addSubview:_mTableView];
    [_mTableView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.equalTo(self.view);
        make.left.equalTo(self.view);
        make.width.equalTo(self.view);
        make.bottom.equalTo(self.bottom_container.mas_top);
    }];
    
    self.mTableView.separatorStyle = UITableViewCellSeparatorStyleSingleLine;
    self.mTableView.separatorColor = [UIColor clearColor];
    self.mTableView.separatorStyle = UITableViewCellSeparatorStyleSingleLine;
    self.mTableView.separatorColor = [UIColor clearColor];
    self.mTableView.tableFooterView = [[UIView alloc] initWithFrame:CGRectZero];
}


- (void) initTableCenterView
{
    _middle_container = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 600, 600)];
    [_middle_container setUserInteractionEnabled:YES];
    UITapGestureRecognizer *g1 = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(gesture:)];
    g1.numberOfTapsRequired =1;
    g1.numberOfTouchesRequired=1;
    [_middle_container addGestureRecognizer:g1];
    [_middle_container setBackgroundColor:[UIColor clearColor]];
//    _mTableView.backgroundView = _middle_container;
    [self.view addSubview:_middle_container];
    [_middle_container mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.equalTo(self.view);
        make.centerY.equalTo(self.view).offset(-80);
        make.width.height.mas_equalTo(200);
    }];
    UIImageView *busImageView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"img_empty_pc"]];
    [_middle_container addSubview:busImageView];
    [busImageView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.equalTo(_middle_container);
        make.centerY.equalTo(_middle_container);
    }];
    
    UILabel *busTitle = [[UILabel alloc] init];
    [busTitle setText:@"尊敬的用户"];
    [busTitle setFont:[UIFont systemFontOfSize:15]];
    [busTitle setContentMode:UIViewContentModeCenter];
    [busTitle setTextColor:[UIColor blackColor]];
    [_middle_container addSubview:busTitle];
    [busTitle mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.equalTo(_middle_container);
        make.top.equalTo(busImageView.mas_bottom);
        make.height.mas_equalTo(30);
        make.width.mas_equalTo(80);
    }];
    
    UILabel *busDesc = [[UILabel alloc] init];
    [busDesc setText:@"欢迎使用呼我拼车，\n点击底部按钮开始愉快行程"];
    [busDesc setFont:[UIFont systemFontOfSize:13]];
    [busDesc setTextColor:RGBHex(g_assit_c)];//RGBHex(g_assit_c)
    [busDesc setLineBreakMode:NSLineBreakByWordWrapping];
    [busDesc setTextAlignment:NSTextAlignmentCenter];
    [busDesc setNumberOfLines:0];
    [_middle_container addSubview:busDesc];
    [busDesc mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.equalTo(_middle_container);
        make.top.equalTo(busTitle.mas_bottom);
        make.width.mas_equalTo(180);
    }];
}

- (void) gesture:(UITapGestureRecognizer*)g
{
    AppiontmentController *special = [[AppiontmentController alloc] init];
    special.startLocation = self.currentLocation;
    special.isNowUseCar = YES;
    special.tripTypeModel = _tripModel;
    [self.navigationController pushViewController:special animated:YES];
}
@end
